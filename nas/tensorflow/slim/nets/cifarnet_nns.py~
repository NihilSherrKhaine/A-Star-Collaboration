# Copyright 2016 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
"""Contains a variant of the CIFAR-10 model definition."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import tensorflow as tf

slim = tf.contrib.slim

trunc_normal = lambda stddev: tf.truncated_normal_initializer(stddev=stddev)


def cifarnet_nns(images, candidate, num_classes=10, is_training=False,
             dropout_keep_prob=0.5,
             prediction_fn=slim.softmax,
             scope='CifarNet'):
  """Creates a variant of the CifarNet model.

  Note that since the output is a set of 'logits', the values fall in the
  interval of (-infinity, infinity). Consequently, to convert the outputs to a
  probability distribution over the characters, one will need to convert them
  using the softmax function:

        logits = cifarnet.cifarnet(images, is_training=False)
        probabilities = tf.nn.softmax(logits)
        predictions = tf.argmax(logits, 1)

  Args:
    images: A batch of `Tensors` of size [batch_size, height, width, channels].
    candidate: a 20-d vector for network architecture representation. [i1, i2, op1, op2]
    num_classes: the number of classes in the dataset. If 0 or None, the logits
      layer is omitted and the input features to the logits layer are returned
      instead.
    is_training: specifies whether or not we're currently training the model.
      This variable will determine the behaviour of the dropout layer.
    dropout_keep_prob: the percentage of activation values that are retained.
    prediction_fn: a function to get predictions out of logits.
    scope: Optional variable_scope.

  Returns:
    net: a 2D Tensor with the logits (pre-softmax activations) if num_classes
      is a non-zero integer, or the input to the logits layer if num_classes
      is 0 or None.
    end_points: a dictionary from components of the network to the corresponding
      activation.
  """
  end_points = {}
  assert len(candidate) == 20

  with tf.variable_scope(scope, 'CifarNet', [images]):
    F = 24
    N = 2

    net = images
    
    for i in xrange(N):
        net = build_cell(net, candidate, F, stride = 1)

    net = build_cell(net, candidate, F, stride = 2)
    F = F * 2

    for i in xrange(N):
        net = build_cell(net, candidate, F, stride = 1)

    net = build_cell(net, candidate, F, stride = 2)
    F = F * 2
  
    for i in xrange(N):
        net = build_cell(net, candidate, F, stride = 1)

    net = tf.reduce_mean(net, [1, 2], name='global_pool', keep_dims=True)

    if not num_classes:
      return net, end_points
    logits = slim.fully_connected(net, num_classes,
                                  biases_initializer=tf.zeros_initializer(),
                                  weights_initializer=trunc_normal(1/192.0),
                                  weights_regularizer=None,
                                  activation_fn=None,
                                  scope='logits')

    end_points['Logits'] = logits
    end_points['Predictions'] = prediction_fn(logits, scope='Predictions')

  return logits, end_points
cifarnet.default_image_size = 32

operations = {}
operations['0'] = '3x3_depth_conv'
operations['1'] = '5x5_depth_conv'
operations['2'] = '7x7_depth_conv'
operations['3'] = 'identity'
operations['4'] = '3x3_avg_pool'
operations['5'] = '3x3_max_pool'
operations['6'] = '3x3_dilated_conv'
operations['7'] = '1x7_7x1'

def apply_operation(net, op_name, num_outputs, stride = 1):
    if op_name == '3x3_depth_conv':
       net = slim.separable_conv2d(net, num_outputs, [3, 3], stride = stride, activation_fn = nn.relu, normalizer_fn = slim.batch_norm)
       return net
    if op_name == '5x5_depth_conv':
       net = slim.separable_conv2d(net, num_outputs, [5, 5], stride = stride, activation_fn = nn.relu, normalizer_fn = slim.batch_norm)
       return net
    if op_name == '7x7_depth_conv':
       net = slim.separable_conv2d(net, num_outputs, [7, 7], stride = stride, activation_fn = nn.relu, normalizer_fn = slim.batch_norm)
       return net
    if op_name == 'identity':
       return net
    if op_name == '3x3_avg_pool':
       net = slim.avg_pool2d(net, [3,3], stride = stride, padding = 'SAME')
       return net
    if op_name == '3x3_max_pool':
       net = slim.max_pool2d(net, [3,3], stride = stride, padding = 'SAME')
       return net
    if op_name == '3x3_dilated_conv':
       net = slim.conv2d(net, num_outputs, [3,3], stride = stride, rate = 1, activation_fn = nn.relu, normalizer_fn = slim.batch_norm)
       return net
    if op_name == '1x7_7x1':
       net = slim.conv2d(net, num_outputs, [1, 7], stride = stride, activation_fn = nn.relu, normalizer_fn = slim.batch_norm)
       net = slim.conv2d(net, num_outputs, [7, 1], stride = stride, activation_fn = nn.relu, normalizer_fn = slim.batch_norm)
       return net
    
     

def build_cell(net, candidate, num_outputs, stride = 1):
    input_points = {}
    input_points['-1'] = net
    B = len(candidate) // 4

    for i in xrange(B):
      i1 = candidate[4*i]
      i2 = candidate[4*i + 1]

      assert i1 < i
      assert i2 < i

      op1 = operations[str(candidate[4*i + 2])]
      op2 = operations[str(candidate[4*i + 3])]
      
      o1 = apply_operation(input_points[str(i1)], op1, num_outputs)
      o2 = apply_operation(input_points[str(i2)], op2, num_outputs)

      input_points[str(i)] = o1 + o2
   
   return tf.concat([input_points[str(i)] for i in xrange(B)], axis = 3)
      
        
       
def cifarnet_arg_scope(weight_decay=0.004):
  """Defines the default cifarnet argument scope.

  Args:
    weight_decay: The weight decay to use for regularizing the model.

  Returns:
    An `arg_scope` to use for the inception v3 model.
  """
  with slim.arg_scope(
      [slim.conv2d],
      weights_initializer=tf.truncated_normal_initializer(stddev=5e-2),
      activation_fn=tf.nn.relu):
    with slim.arg_scope(
        [slim.fully_connected],
        biases_initializer=tf.constant_initializer(0.1),
        weights_initializer=trunc_normal(0.04),
        weights_regularizer=slim.l2_regularizer(weight_decay),
        activation_fn=tf.nn.relu) as sc:
      return sc
